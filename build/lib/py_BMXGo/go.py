
# python wrapper for package go within overall package BMXGo
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy build --output=py_BMXGo -vm=python3 .

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from . import _BMXGo

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from BMXGo import go
# and then refer to everything using go. prefix
# packages imported by this package listed below:


import collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections
	
class GoClass(object):
	"""GoClass is the base class for all GoPy wrapper classes"""
	def __init__(self):
		self.handle = 0

# use go.nil for nil pointers 
nil = GoClass()

# need to explicitly initialize it
def main():
	global nil
	nil = GoClass()

main()

def Init():
	"""calls the GoPyInit function, which runs the 'main' code string that was passed using -main arg to gopy"""
	_BMXGo.GoPyInit()

	


# ---- Types ---

# Python type for slice []bool
class Slice_bool(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = _BMXGo.Slice_bool_CTor()
			_BMXGo.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_bool.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	def __str__(self):
		s = 'go.Slice_bool len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'go.Slice_bool([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _BMXGo.Slice_bool_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _BMXGo.Slice_bool_len(self.handle)
				return Slice_bool(handle=_BMXGo.Slice_bool_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _BMXGo.Slice_bool_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_BMXGo.Slice_bool_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_bool.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _BMXGo.Slice_bool_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_BMXGo.Slice_bool_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []byte
class Slice_byte(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = _BMXGo.Slice_byte_CTor()
			_BMXGo.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_byte.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	def __str__(self):
		s = 'go.Slice_byte len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'go.Slice_byte([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _BMXGo.Slice_byte_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _BMXGo.Slice_byte_len(self.handle)
				return Slice_byte(handle=_BMXGo.Slice_byte_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _BMXGo.Slice_byte_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_BMXGo.Slice_byte_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_byte.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _BMXGo.Slice_byte_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_BMXGo.Slice_byte_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]
	@staticmethod
	def from_bytes(value):
		"""Create a Go []byte object from a Python bytes object"""
		handle = _BMXGo.Slice_byte_from_bytes(value)
		return Slice_byte(handle=handle)
	def __bytes__(self):
		"""Convert the slice to a bytes object."""
		return _BMXGo.Slice_byte_to_bytes(self.handle)

# Python type for slice []error
class Slice_error(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = _BMXGo.Slice_error_CTor()
			_BMXGo.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_error.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	def __str__(self):
		s = 'go.Slice_error len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'go.Slice_error([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _BMXGo.Slice_error_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _BMXGo.Slice_error_len(self.handle)
				return Slice_error(handle=_BMXGo.Slice_error_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _BMXGo.Slice_error_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_BMXGo.Slice_error_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_error.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _BMXGo.Slice_error_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_BMXGo.Slice_error_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []float32
class Slice_float32(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = _BMXGo.Slice_float32_CTor()
			_BMXGo.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_float32.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	def __str__(self):
		s = 'go.Slice_float32 len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'go.Slice_float32([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _BMXGo.Slice_float32_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _BMXGo.Slice_float32_len(self.handle)
				return Slice_float32(handle=_BMXGo.Slice_float32_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _BMXGo.Slice_float32_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_BMXGo.Slice_float32_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_float32.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _BMXGo.Slice_float32_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_BMXGo.Slice_float32_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []float64
class Slice_float64(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = _BMXGo.Slice_float64_CTor()
			_BMXGo.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_float64.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	def __str__(self):
		s = 'go.Slice_float64 len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'go.Slice_float64([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _BMXGo.Slice_float64_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _BMXGo.Slice_float64_len(self.handle)
				return Slice_float64(handle=_BMXGo.Slice_float64_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _BMXGo.Slice_float64_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_BMXGo.Slice_float64_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_float64.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _BMXGo.Slice_float64_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_BMXGo.Slice_float64_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []int
class Slice_int(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = _BMXGo.Slice_int_CTor()
			_BMXGo.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_int.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	def __str__(self):
		s = 'go.Slice_int len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'go.Slice_int([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _BMXGo.Slice_int_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _BMXGo.Slice_int_len(self.handle)
				return Slice_int(handle=_BMXGo.Slice_int_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _BMXGo.Slice_int_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_BMXGo.Slice_int_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_int.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _BMXGo.Slice_int_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_BMXGo.Slice_int_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []int16
class Slice_int16(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = _BMXGo.Slice_int16_CTor()
			_BMXGo.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_int16.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	def __str__(self):
		s = 'go.Slice_int16 len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'go.Slice_int16([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _BMXGo.Slice_int16_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _BMXGo.Slice_int16_len(self.handle)
				return Slice_int16(handle=_BMXGo.Slice_int16_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _BMXGo.Slice_int16_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_BMXGo.Slice_int16_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_int16.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _BMXGo.Slice_int16_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_BMXGo.Slice_int16_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []int32
class Slice_int32(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = _BMXGo.Slice_int32_CTor()
			_BMXGo.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_int32.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	def __str__(self):
		s = 'go.Slice_int32 len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'go.Slice_int32([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _BMXGo.Slice_int32_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _BMXGo.Slice_int32_len(self.handle)
				return Slice_int32(handle=_BMXGo.Slice_int32_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _BMXGo.Slice_int32_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_BMXGo.Slice_int32_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_int32.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _BMXGo.Slice_int32_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_BMXGo.Slice_int32_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []int64
class Slice_int64(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = _BMXGo.Slice_int64_CTor()
			_BMXGo.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_int64.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	def __str__(self):
		s = 'go.Slice_int64 len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'go.Slice_int64([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _BMXGo.Slice_int64_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _BMXGo.Slice_int64_len(self.handle)
				return Slice_int64(handle=_BMXGo.Slice_int64_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _BMXGo.Slice_int64_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_BMXGo.Slice_int64_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_int64.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _BMXGo.Slice_int64_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_BMXGo.Slice_int64_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []int8
class Slice_int8(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = _BMXGo.Slice_int8_CTor()
			_BMXGo.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_int8.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	def __str__(self):
		s = 'go.Slice_int8 len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'go.Slice_int8([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _BMXGo.Slice_int8_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _BMXGo.Slice_int8_len(self.handle)
				return Slice_int8(handle=_BMXGo.Slice_int8_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _BMXGo.Slice_int8_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_BMXGo.Slice_int8_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_int8.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _BMXGo.Slice_int8_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_BMXGo.Slice_int8_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []rune
class Slice_rune(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = _BMXGo.Slice_rune_CTor()
			_BMXGo.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_rune.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	def __str__(self):
		s = 'go.Slice_rune len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'go.Slice_rune([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _BMXGo.Slice_rune_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _BMXGo.Slice_rune_len(self.handle)
				return Slice_rune(handle=_BMXGo.Slice_rune_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _BMXGo.Slice_rune_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_BMXGo.Slice_rune_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_rune.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _BMXGo.Slice_rune_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_BMXGo.Slice_rune_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []string
class Slice_string(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = _BMXGo.Slice_string_CTor()
			_BMXGo.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_string.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	def __str__(self):
		s = 'go.Slice_string len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'go.Slice_string([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _BMXGo.Slice_string_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _BMXGo.Slice_string_len(self.handle)
				return Slice_string(handle=_BMXGo.Slice_string_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _BMXGo.Slice_string_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_BMXGo.Slice_string_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_string.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _BMXGo.Slice_string_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_BMXGo.Slice_string_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []uint
class Slice_uint(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = _BMXGo.Slice_uint_CTor()
			_BMXGo.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_uint.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	def __str__(self):
		s = 'go.Slice_uint len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'go.Slice_uint([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _BMXGo.Slice_uint_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _BMXGo.Slice_uint_len(self.handle)
				return Slice_uint(handle=_BMXGo.Slice_uint_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _BMXGo.Slice_uint_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_BMXGo.Slice_uint_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_uint.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _BMXGo.Slice_uint_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_BMXGo.Slice_uint_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []uint16
class Slice_uint16(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = _BMXGo.Slice_uint16_CTor()
			_BMXGo.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_uint16.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	def __str__(self):
		s = 'go.Slice_uint16 len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'go.Slice_uint16([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _BMXGo.Slice_uint16_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _BMXGo.Slice_uint16_len(self.handle)
				return Slice_uint16(handle=_BMXGo.Slice_uint16_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _BMXGo.Slice_uint16_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_BMXGo.Slice_uint16_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_uint16.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _BMXGo.Slice_uint16_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_BMXGo.Slice_uint16_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []uint32
class Slice_uint32(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = _BMXGo.Slice_uint32_CTor()
			_BMXGo.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_uint32.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	def __str__(self):
		s = 'go.Slice_uint32 len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'go.Slice_uint32([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _BMXGo.Slice_uint32_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _BMXGo.Slice_uint32_len(self.handle)
				return Slice_uint32(handle=_BMXGo.Slice_uint32_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _BMXGo.Slice_uint32_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_BMXGo.Slice_uint32_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_uint32.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _BMXGo.Slice_uint32_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_BMXGo.Slice_uint32_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []uint64
class Slice_uint64(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = _BMXGo.Slice_uint64_CTor()
			_BMXGo.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_uint64.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	def __str__(self):
		s = 'go.Slice_uint64 len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'go.Slice_uint64([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _BMXGo.Slice_uint64_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _BMXGo.Slice_uint64_len(self.handle)
				return Slice_uint64(handle=_BMXGo.Slice_uint64_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _BMXGo.Slice_uint64_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_BMXGo.Slice_uint64_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_uint64.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _BMXGo.Slice_uint64_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_BMXGo.Slice_uint64_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []uint8
class Slice_uint8(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = _BMXGo.Slice_uint8_CTor()
			_BMXGo.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_uint8.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	def __str__(self):
		s = 'go.Slice_uint8 len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'go.Slice_uint8([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _BMXGo.Slice_uint8_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _BMXGo.Slice_uint8_len(self.handle)
				return Slice_uint8(handle=_BMXGo.Slice_uint8_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _BMXGo.Slice_uint8_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_BMXGo.Slice_uint8_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_uint8.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _BMXGo.Slice_uint8_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_BMXGo.Slice_uint8_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# ---- External Types Outside of Targeted Packages ---

# Python type for *tls.ConnectionState
class Ptr_tls_ConnectionState(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for *x509.CertPool
class Ptr_x509_CertPool(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for *x509.Certificate
class Ptr_x509_Certificate(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for *pkix.CertificateList
class Ptr_pkix_CertificateList(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for *big.Int
class Ptr_big_Int(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for *rand.Rand
class Ptr_rand_Rand(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for *multipart.FileHeader
class Ptr_multipart_FileHeader(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for *multipart.Form
class Ptr_multipart_Form(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for *multipart.Part
class Ptr_multipart_Part(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for *multipart.Reader
class Ptr_multipart_Reader(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for *net.IPNet
class Ptr_net_IPNet(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for *http.Client
class Ptr_http_Client(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for *http.Cookie
class Ptr_http_Cookie(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for *http.Request
class Ptr_http_Request(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for *http.Response
class Ptr_http_Response(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for *url.URL
class Ptr_url_URL(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for *url.Userinfo
class Ptr_url_Userinfo(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for *time.Location
class Ptr_time_Location(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for context.Context
class context_Context(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for tls.ConnectionState
class tls_ConnectionState(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for x509.CertPool
class x509_CertPool(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for x509.Certificate
class x509_Certificate(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for x509.OID
class x509_OID(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for x509.VerifyOptions
class x509_VerifyOptions(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for pkix.AlgorithmIdentifier
class pkix_AlgorithmIdentifier(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for pkix.AttributeTypeAndValue
class pkix_AttributeTypeAndValue(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for pkix.CertificateList
class pkix_CertificateList(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for pkix.Extension
class pkix_Extension(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for pkix.Name
class pkix_Name(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for slice pkix.RelativeDistinguishedNameSET
class RelativeDistinguishedNameSET(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = _BMXGo.pkix_RelativeDistinguishedNameSET_CTor()
			_BMXGo.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('pkix_RelativeDistinguishedNameSET.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	def __str__(self):
		s = 'pkix.pkix_RelativeDistinguishedNameSET len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'pkix.pkix_RelativeDistinguishedNameSET([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _BMXGo.pkix_RelativeDistinguishedNameSET_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _BMXGo.pkix_RelativeDistinguishedNameSET_len(self.handle)
				return RelativeDistinguishedNameSET(handle=_BMXGo.pkix_RelativeDistinguishedNameSET_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return go.pkix_AttributeTypeAndValue(handle=_BMXGo.pkix_RelativeDistinguishedNameSET_elem(self.handle, key))
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_BMXGo.pkix_RelativeDistinguishedNameSET_set(self.handle, idx, value.handle)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('pkix_RelativeDistinguishedNameSET.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = go.pkix_AttributeTypeAndValue(handle=_BMXGo.pkix_RelativeDistinguishedNameSET_elem(self.handle, self.index))
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_BMXGo.pkix_RelativeDistinguishedNameSET_append(self.handle, value.handle)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for pkix.RevokedCertificate
class pkix_RevokedCertificate(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for pkix.TBSCertificateList
class pkix_TBSCertificateList(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for asn1.BitString
class asn1_BitString(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for slice asn1.ObjectIdentifier
class ObjectIdentifier(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = _BMXGo.asn1_ObjectIdentifier_CTor()
			_BMXGo.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('asn1_ObjectIdentifier.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	def __str__(self):
		s = 'asn1.asn1_ObjectIdentifier len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'asn1.asn1_ObjectIdentifier([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _BMXGo.asn1_ObjectIdentifier_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _BMXGo.asn1_ObjectIdentifier_len(self.handle)
				return ObjectIdentifier(handle=_BMXGo.asn1_ObjectIdentifier_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _BMXGo.asn1_ObjectIdentifier_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_BMXGo.asn1_ObjectIdentifier_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('asn1_ObjectIdentifier.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _BMXGo.asn1_ObjectIdentifier_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_BMXGo.asn1_ObjectIdentifier_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice asn1.RawContent
class RawContent(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = _BMXGo.asn1_RawContent_CTor()
			_BMXGo.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('asn1_RawContent.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	def __str__(self):
		s = 'asn1.asn1_RawContent len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'asn1.asn1_RawContent([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _BMXGo.asn1_RawContent_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _BMXGo.asn1_RawContent_len(self.handle)
				return RawContent(handle=_BMXGo.asn1_RawContent_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _BMXGo.asn1_RawContent_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_BMXGo.asn1_RawContent_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('asn1_RawContent.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _BMXGo.asn1_RawContent_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_BMXGo.asn1_RawContent_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for asn1.RawValue
class asn1_RawValue(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for fmt.ScanState
class fmt_ScanState(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for fmt.State
class fmt_State(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for io.ReadCloser
class io_ReadCloser(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for io.Reader
class io_Reader(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for io.Writer
class io_Writer(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for big.Int
class big_Int(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for rand.Rand
class rand_Rand(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for multipart.File
class multipart_File(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for multipart.FileHeader
class multipart_FileHeader(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for multipart.Form
class multipart_Form(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for multipart.Part
class multipart_Part(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for multipart.Reader
class multipart_Reader(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for slice net.IP
class IP(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = _BMXGo.net_IP_CTor()
			_BMXGo.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('net_IP.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	def __str__(self):
		s = 'net.net_IP len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'net.net_IP([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _BMXGo.net_IP_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _BMXGo.net_IP_len(self.handle)
				return IP(handle=_BMXGo.net_IP_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _BMXGo.net_IP_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_BMXGo.net_IP_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('net_IP.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _BMXGo.net_IP_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_BMXGo.net_IP_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice net.IPMask
class IPMask(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = _BMXGo.net_IPMask_CTor()
			_BMXGo.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('net_IPMask.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	def __str__(self):
		s = 'net.net_IPMask len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'net.net_IPMask([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _BMXGo.net_IPMask_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _BMXGo.net_IPMask_len(self.handle)
				return IPMask(handle=_BMXGo.net_IPMask_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _BMXGo.net_IPMask_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_BMXGo.net_IPMask_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('net_IPMask.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _BMXGo.net_IPMask_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_BMXGo.net_IPMask_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for net.IPNet
class net_IPNet(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for http.Client
class http_Client(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for http.Cookie
class http_Cookie(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for http.CookieJar
class http_CookieJar(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for map http.Header
class Header(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = _BMXGo.http_Header_CTor()
			_BMXGo.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Mapping):
					raise TypeError('http_Header.__init__ takes a mapping as argument')
				for k, v in args[0].items():
					_BMXGo.http_Header_set(self.handle, k, v)
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	def __str__(self):
		s = 'BMXGo.http_Header len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' {'
		if len(self) < 120:
			for k, v in self.items():
				s += str(k) + '=' + str(v) + ', '
		return s + '}'
	def __repr__(self):
		s = 'BMXGo.http_Header({'
		for k, v in self.items():
			s += str(k) + '=' + str(v) + ', '
		return s + '})'
	def __len__(self):
		return _BMXGo.http_Header_len(self.handle)
	def __getitem__(self, key):
		return go.Slice_string(handle=_BMXGo.http_Header_elem(self.handle, key))
	def __setitem__(self, key, value):
		_BMXGo.http_Header_set(self.handle, key, value.handle)
	def __delitem__(self, key):
		return _BMXGo.http_Header_delete(self.handle, key)
	def keys(self):
		return go.Slice_string(handle=_BMXGo.http_Header_keys(self.handle))
	def values(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append(self[k])
		return vls
	def items(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append((k, self[k]))
		return vls
	def __iter__(self):
		return iter(self.items())
	def __contains__(self, key):
		return _BMXGo.http_Header_contains(self.handle, key)

# Python type for http.Request
class http_Request(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for http.Response
class http_Response(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for http.RoundTripper
class http_RoundTripper(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for map textproto.MIMEHeader
class MIMEHeader(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = _BMXGo.textproto_MIMEHeader_CTor()
			_BMXGo.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Mapping):
					raise TypeError('textproto_MIMEHeader.__init__ takes a mapping as argument')
				for k, v in args[0].items():
					_BMXGo.textproto_MIMEHeader_set(self.handle, k, v)
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	def __str__(self):
		s = 'BMXGo.textproto_MIMEHeader len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' {'
		if len(self) < 120:
			for k, v in self.items():
				s += str(k) + '=' + str(v) + ', '
		return s + '}'
	def __repr__(self):
		s = 'BMXGo.textproto_MIMEHeader({'
		for k, v in self.items():
			s += str(k) + '=' + str(v) + ', '
		return s + '})'
	def __len__(self):
		return _BMXGo.textproto_MIMEHeader_len(self.handle)
	def __getitem__(self, key):
		return go.Slice_string(handle=_BMXGo.textproto_MIMEHeader_elem(self.handle, key))
	def __setitem__(self, key, value):
		_BMXGo.textproto_MIMEHeader_set(self.handle, key, value.handle)
	def __delitem__(self, key):
		return _BMXGo.textproto_MIMEHeader_delete(self.handle, key)
	def keys(self):
		return go.Slice_string(handle=_BMXGo.textproto_MIMEHeader_keys(self.handle))
	def values(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append(self[k])
		return vls
	def items(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append((k, self[k]))
		return vls
	def __iter__(self):
		return iter(self.items())
	def __contains__(self, key):
		return _BMXGo.textproto_MIMEHeader_contains(self.handle, key)

# Python type for url.URL
class url_URL(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for url.Userinfo
class url_Userinfo(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for map url.Values
class Values(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = _BMXGo.url_Values_CTor()
			_BMXGo.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Mapping):
					raise TypeError('url_Values.__init__ takes a mapping as argument')
				for k, v in args[0].items():
					_BMXGo.url_Values_set(self.handle, k, v)
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	def __str__(self):
		s = 'BMXGo.url_Values len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' {'
		if len(self) < 120:
			for k, v in self.items():
				s += str(k) + '=' + str(v) + ', '
		return s + '}'
	def __repr__(self):
		s = 'BMXGo.url_Values({'
		for k, v in self.items():
			s += str(k) + '=' + str(v) + ', '
		return s + '})'
	def __len__(self):
		return _BMXGo.url_Values_len(self.handle)
	def __getitem__(self, key):
		return go.Slice_string(handle=_BMXGo.url_Values_elem(self.handle, key))
	def __setitem__(self, key, value):
		_BMXGo.url_Values_set(self.handle, key, value.handle)
	def __delitem__(self, key):
		return _BMXGo.url_Values_delete(self.handle, key)
	def keys(self):
		return go.Slice_string(handle=_BMXGo.url_Values_keys(self.handle))
	def values(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append(self[k])
		return vls
	def items(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append((k, self[k]))
		return vls
	def __iter__(self):
		return iter(self.items())
	def __contains__(self, key):
		return _BMXGo.url_Values_contains(self.handle, key)

# Python type for time.Location
class time_Location(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	

# Python type for time.Time
class time_Time(GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], GoClass):
			self.handle = args[0].handle
			_BMXGo.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], int):
			self.handle = args[0]
			_BMXGo.IncRef(self.handle)
		else:
			self.handle = 0
	def __del__(self):
		_BMXGo.DecRef(self.handle)
	


